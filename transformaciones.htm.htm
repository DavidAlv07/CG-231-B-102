<!DOCTYPE html>
<html>
    <head>
        <title>Taller de computacion grafica</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #text {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #ff0000;
            }
        </style>
    </head>
    <body>
        <div id="text">David Alvarez - (6000627)<br/>
            Computación Gráfica - Cubo (Transformadas)<br/>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>

    function init() 
    {

        //Set up the scene
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);    
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        var size = 700;
        var arrowSize = 100;
        var divisions = 20;
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 ); 
        var colorR = new THREE.Color( 0xAA0000 ); 
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //REJILLA
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);
        

        //LOS EJES
        var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
        var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
        var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
        
            
        //CAMARA
        camera.position.x = 000;
        camera.position.y = 080;
        camera.position.z = 400;
        camera.lookAt(scene.position);

        //-----------------------------------------------------------------------------------------------------------

        // LA FUNCIÓN (CUBO)
        
        function cubo(posini, lado, color)
        { 
            /**
             * Para crear el cubo se usan dos parametos: 
             * 1. El arreglo posini[x0, y0, z0] donde se definen la posicion inicial del cubo
             * 2. La variable lado para definir la longitud del lado
             * 
             * A las posiciones iniciales se les suma la mitad del lado para asi generar el cubo
            **/

            //Se utilizo array aristas para generer los vectores entre los vertices.
            //Face3 genera caras de forma distinta, por eso no fue requerido al solo utilizar lineas.

            var geometry = new THREE.Geometry();
            var vertices = [
                new THREE.Vector3((posini[0] + lado/2), (posini[1] + lado/2), (posini[2] + lado/2)),
                new THREE.Vector3(lado, (posini[1] + lado/2), (posini[2] + lado/2)),
                new THREE.Vector3(lado, lado, (posini[2] + lado/2)),
                new THREE.Vector3((posini[0] + lado/2), lado, (posini[2] + lado/2)),
                new THREE.Vector3((posini[0] + lado/2), (posini[1] + lado/2), lado),
                new THREE.Vector3(lado, (posini[1] + lado/2), lado),
                new THREE.Vector3(lado, lado, lado),
                new THREE.Vector3((posini[0] + lado/2), lado, lado)
            ];
            
            var arist = [

                [0, 1], [1, 2], [2, 3], [3, 0], // aristas horizontales en la base del cubo
                [4, 5], [5, 6], [6, 7], [7, 4], // aristas horizontales en la parte superior del cubo
                [0, 4], [1, 5], [2, 6], [3, 7], // aristas verticales que unen la base con la parte superior

            ];

            //ARISTAS DEL CUBO
            var geometry = new THREE.Geometry();
            var material = new THREE.LineBasicMaterial({ color: color });

            //SE GENERAN LAS ARISTAS
            for (var i = 0; i < arist.length; i++) {
                var edge = arist[i];
                geometry.vertices.push(vertices[edge[0]], vertices[edge[1]]);
            }

            var cubo = new THREE.LineSegments(geometry, material);
        
            return cubo;
        }

        //-----------------------------------------------------------------------------------------------------------------

        // SE HACE EL LLAMADO DE LA FUNCIÓN (CUBO)

        //PARÁMETROS
        //COLOR DE LOS CUBOS
        var col1 = 0x00ffff;
        var col2 = 0xc29b61;
        var col3 = 0xff0000;
        var col4 = 0xffff00;
        var col5 = 0Xffff00;
        // ALTURA DE LOS LADOS 
        var lado = 55; 
        //LA LONGITUD DE TRASLACIÓN
        var tx = 2; //Este parámetro es para definir la longitud de traslación**
        //PORCENTAJE DE ESCALADO
        var pEscala = 1.5; // Parámetro para de definir el porcentaje de escalado**

        //CUBO #1 
        var c = cubo(origin, lado, col1);
        //CUBO #2 (TRASLACIÓN)
        var c_Tras = cubo(origin, lado, col2);
        //CUBO #3 (ESCALADO)
        var c_Escala = cubo(origin, lado, col3);
        //CUBO #4 (ROTADO)
        var c_Rota = cubo(origin, lado, col4);
        //CUBO #5 (TODAS LAS TRASNFORMADAS - PRUEBA)
        var c_F = cubo(origin, lado, col5);

        //MATRIZ TRASLACIÓN
        var traslacion = new THREE.Matrix4();
        traslacion.set(1, 0, 0, tx*lado,
                       0, 1, 0, 0,
                       0, 0, 1, 0,
                       0, 0, 0, 1);

            c_Tras.applyMatrix(traslacion);
            c_Escala.applyMatrix(traslacion);
            c_Rota.applyMatrix(traslacion);

        //MATRIZ ESCALADO
        var escalado = new THREE.Matrix4();
        escalado.set(pEscala, 0, 0, 0,
                     0, pEscala, 0, 0,
                     0, 0, pEscala, 0,
                     0, 0, 0, pEscala);

            c_Escala.applyMatrix(escalado);
            c_Rota.applyMatrix(escalado);

        //MATRIZ ROTACIÓN
        var pi = 3.14159265359
        var rotacionX = new THREE.Matrix4();
        var angulo = pi/4; //este parámetro para definir el ángulo de rotación**
        var cs = Math.cos(angulo);   
        var ss = Math.sin(angulo);

        rotacionX.set(1,  0, 0, 0,
                    0, cs, -ss, 0, 
                     0, ss, cs, 0,
                       0, 0, 0, 1);	

            c_Rota.applyMatrix(rotacionX);
            c_F.applyMatrix(rotacionX);

        document.body.appendChild(renderer.domElement);
        
        
        //ELEMENTOS DE LA ESCENA
        scene.add(arrowX);
        scene.add(arrowY);
        scene.add(arrowZ);
        scene.add(gridHelperXZ);
        //SE AGREGAN LOS CUBOS A LA ESCENA
        scene.add(c);
        scene.add(c_Tras);
        scene.add(c_Escala);
        scene.add(c_Rota);
        //scene.add(c_F);
        
   

        renderer.render(scene, camera);
    }

    init();  
    
    // NOTA: No he podido hacer que las transformas de escalado y rotación, se queden en su origen respectivo. 
    // El cual es en el que está la transformada de traslación. 



    </script>
  </body>
</html>